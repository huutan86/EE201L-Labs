////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2011 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 13.2
//  \   \         Application : sch2hdl
//  /   /         Filename : ee201l_number_lock_top.vf
// /___/   /\     Timestamp : 01/31/2014 15:02:50
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Modelsim_projects/Lab02/ee201l_number_lock_sch/ee201l_number_lock_top.vf -w C:/Modelsim_projects/Lab02/ee201l_number_lock_sch/ee201l_number_lock_top.sch
//Design Name: ee201l_number_lock_top
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CB4CE_HXILINX_ee201l_number_lock_top(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module OR8_HXILINX_ee201l_number_lock_top (O, I0, I1, I2, I3, I4, I5, I6, I7);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;
   input I6;
   input I7;

assign O = (I0 || I1 || I2 || I3 || I4 || I5 || I6 || I7);

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ee201l_number_lock_top (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module M16_1E_HXILINX_ee201l_number_lock_top (O, D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, E, S0, S1, S2, S3);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  D4;
   input  D5;
   input  D6;
   input  D7;
   input  D8;
   input  D9;
   input  D10;
   input  D11;
   input  D12;
   input  D13;
   input  D14;
   input  D15;
   input  E;
   input  S0;
   input  S1;
   input  S2;
   input  S3;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or D4 or D5 or D6 or D7 or D8 or D9 or D10 or D11 or D12 or D13 or D14 or D15 or E or S0 or S1 or S2 or S3)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S3,S2,S1,S0})
        4'b0000 : O <= D0;
        4'b0001 : O <= D1;
        4'b0010 : O <= D2;
        4'b0011 : O <= D3;
        4'b0100 : O <= D4;
        4'b0101 : O <= D5;
        4'b0110 : O <= D6;
        4'b0111 : O <= D7;
        4'b1000 : O <= D8;
        4'b1001 : O <= D9;
        4'b1010 : O <= D10;
        4'b1011 : O <= D11;
        4'b1100 : O <= D12;
        4'b1101 : O <= D13;
        4'b1110 : O <= D14;
        4'b1111 : O <= D15;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_ee201l_number_lock_top (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module ee201l_number_lock_MUSER_ee201l_number_lock_top(reset, 
                                                       sysclk, 
                                                       u, 
                                                       z, 
                                                       state);

    input reset;
    input sysclk;
    input u;
    input z;
   output [10:0] state;
   
   wire bad;
   wire bad_d;
   wire g1;
   wire g1get;
   wire g1get_d;
   wire g1_d;
   wire g10;
   wire g10get;
   wire g10get_d;
   wire g10_d;
   wire g101;
   wire g101get;
   wire g101get_d;
   wire g101_d;
   wire g1011;
   wire g1011get;
   wire g1011get_d;
   wire g1011_d;
   wire initial_d;
   wire initial_state;
   wire opening;
   wire opening_d;
   wire timerout;
   wire timerout_n;
   wire u_n;
   wire XLXN_275;
   wire XLXN_276;
   wire XLXN_289;
   wire XLXN_291;
   wire XLXN_379;
   wire XLXN_381;
   wire XLXN_388;
   wire XLXN_390;
   wire XLXN_397;
   wire XLXN_399;
   wire XLXN_402;
   wire XLXN_403;
   wire XLXN_409;
   wire XLXN_410;
   wire XLXN_411;
   wire XLXN_412;
   wire XLXN_470;
   wire XLXN_474;
   wire XLXN_475;
   wire XLXN_476;
   wire XLXN_477;
   wire XLXN_494;
   wire XLXN_496;
   wire XLXN_497;
   wire z_n;
   
   FDC  XLXI_23 (.C(sysclk), 
                .CLR(reset), 
                .D(g1get_d), 
                .Q(g1get));
   FDC  XLXI_24 (.C(sysclk), 
                .CLR(reset), 
                .D(g1_d), 
                .Q(g1));
   FDC  XLXI_25 (.C(sysclk), 
                .CLR(reset), 
                .D(g10get_d), 
                .Q(g10get));
   FDC  XLXI_26 (.C(sysclk), 
                .CLR(reset), 
                .D(bad_d), 
                .Q(bad));
   FDC  XLXI_27 (.C(sysclk), 
                .CLR(reset), 
                .D(g10_d), 
                .Q(g10));
   FDC  XLXI_28 (.C(sysclk), 
                .CLR(reset), 
                .D(g101get_d), 
                .Q(g101get));
   FDC  XLXI_29 (.C(sysclk), 
                .CLR(reset), 
                .D(g1011get_d), 
                .Q(g1011get));
   FDC  XLXI_30 (.C(sysclk), 
                .CLR(reset), 
                .D(g1011_d), 
                .Q(g1011));
   FDC  XLXI_31 (.C(sysclk), 
                .CLR(reset), 
                .D(opening_d), 
                .Q(opening));
   FDC  XLXI_32 (.C(sysclk), 
                .CLR(reset), 
                .D(g101_d), 
                .Q(g101));
   BUF  XLXI_53 (.I(initial_state), 
                .O(state[0]));
   BUF  XLXI_54 (.I(g1get), 
                .O(state[1]));
   BUF  XLXI_55 (.I(g1), 
                .O(state[2]));
   BUF  XLXI_56 (.I(g10get), 
                .O(state[3]));
   BUF  XLXI_57 (.I(g10), 
                .O(state[4]));
   BUF  XLXI_58 (.I(g101get), 
                .O(state[5]));
   BUF  XLXI_59 (.I(g101), 
                .O(state[6]));
   BUF  XLXI_60 (.I(g1011get), 
                .O(state[7]));
   BUF  XLXI_61 (.I(g1011), 
                .O(state[8]));
   BUF  XLXI_62 (.I(opening), 
                .O(state[9]));
   BUF  XLXI_63 (.I(bad), 
                .O(state[10]));
   INV  XLXI_64 (.I(u), 
                .O(u_n));
   INV  XLXI_65 (.I(z), 
                .O(z_n));
   (* HU_SET = "XLXI_66_5" *) 
   CB4CE_HXILINX_ee201l_number_lock_top  XLXI_66 (.C(sysclk), 
                                                 .CE(opening), 
                                                 .CLR(reset), 
                                                 .CEO(timerout), 
                                                 .Q0(), 
                                                 .Q1(), 
                                                 .Q2(), 
                                                 .Q3(), 
                                                 .TC());
   INV  XLXI_67 (.I(timerout), 
                .O(timerout_n));
   AND2  XLXI_100 (.I0(u), 
                  .I1(g1get), 
                  .O(XLXN_275));
   AND3  XLXI_101 (.I0(z_n), 
                  .I1(initial_state), 
                  .I2(u), 
                  .O(XLXN_276));
   OR2  XLXI_102 (.I0(XLXN_276), 
                 .I1(XLXN_275), 
                 .O(g1get_d));
   AND2  XLXI_103 (.I0(u_n), 
                  .I1(g1get), 
                  .O(XLXN_289));
   OR2  XLXI_104 (.I0(XLXN_291), 
                 .I1(XLXN_289), 
                 .O(g1_d));
   AND3  XLXI_105 (.I0(u_n), 
                  .I1(z_n), 
                  .I2(g1), 
                  .O(XLXN_291));
   AND2  XLXI_133 (.I0(u), 
                  .I1(g101get), 
                  .O(XLXN_379));
   OR2  XLXI_134 (.I0(XLXN_381), 
                 .I1(XLXN_379), 
                 .O(g101get_d));
   AND3  XLXI_135 (.I0(g10), 
                  .I1(u), 
                  .I2(z_n), 
                  .O(XLXN_381));
   AND2  XLXI_136 (.I0(g101get), 
                  .I1(u_n), 
                  .O(XLXN_388));
   OR2  XLXI_137 (.I0(XLXN_390), 
                 .I1(XLXN_388), 
                 .O(g101_d));
   AND3  XLXI_138 (.I0(g101), 
                  .I1(z_n), 
                  .I2(u_n), 
                  .O(XLXN_390));
   AND2  XLXI_139 (.I0(g1011get), 
                  .I1(u), 
                  .O(XLXN_397));
   OR2  XLXI_140 (.I0(XLXN_399), 
                 .I1(XLXN_397), 
                 .O(g1011get_d));
   AND3  XLXI_141 (.I0(g101), 
                  .I1(z_n), 
                  .I2(u), 
                  .O(XLXN_399));
   AND2  XLXI_145 (.I0(u_n), 
                  .I1(g1011get), 
                  .O(g1011_d));
   FDP  XLXI_150 (.C(sysclk), 
                 .D(initial_d), 
                 .PRE(reset), 
                 .Q(initial_state));
   AND2  XLXI_151 (.I0(opening), 
                  .I1(timerout), 
                  .O(XLXN_403));
   AND3  XLXI_152 (.I0(z_n), 
                  .I1(u_n), 
                  .I2(bad), 
                  .O(XLXN_402));
   OR4  XLXI_158 (.I0(XLXN_412), 
                 .I1(XLXN_411), 
                 .I2(XLXN_410), 
                 .I3(XLXN_409), 
                 .O(bad_d));
   AND2  XLXI_163 (.I0(u), 
                  .I1(g1), 
                  .O(XLXN_409));
   AND2  XLXI_164 (.I0(z), 
                  .I1(g10), 
                  .O(XLXN_410));
   AND2  XLXI_165 (.I0(z), 
                  .I1(g101), 
                  .O(XLXN_411));
   AND2  XLXI_170 (.I0(XLXN_470), 
                  .I1(bad), 
                  .O(XLXN_412));
   AND3  XLXI_171 (.I0(z), 
                  .I1(u_n), 
                  .I2(g1), 
                  .O(XLXN_475));
   AND3  XLXI_172 (.I0(u_n), 
                  .I1(z_n), 
                  .I2(g10), 
                  .O(XLXN_477));
   AND2  XLXI_173 (.I0(z_n), 
                  .I1(g10get), 
                  .O(XLXN_476));
   AND2  XLXI_174 (.I0(z), 
                  .I1(g10get), 
                  .O(XLXN_474));
   OR2  XLXI_175 (.I0(XLXN_475), 
                 .I1(XLXN_474), 
                 .O(g10get_d));
   OR2  XLXI_176 (.I0(XLXN_477), 
                 .I1(XLXN_476), 
                 .O(g10_d));
   OR3  XLXI_180 (.I0(XLXN_496), 
                 .I1(XLXN_402), 
                 .I2(XLXN_403), 
                 .O(initial_d));
   AND2  XLXI_181 (.I0(XLXN_494), 
                  .I1(initial_state), 
                  .O(XLXN_496));
   NAND2  XLXI_185 (.I0(z_n), 
                   .I1(u), 
                   .O(XLXN_494));
   OR2  XLXI_187 (.I0(XLXN_497), 
                 .I1(g1011), 
                 .O(opening_d));
   AND2  XLXI_188 (.I0(opening), 
                  .I1(timerout_n), 
                  .O(XLXN_497));
   OR2  XLXI_189 (.I0(z), 
                 .I1(u), 
                 .O(XLXN_470));
endmodule
`timescale 1ns / 1ps

module hex_to_ssd_MUSER_ee201l_number_lock_top(hex, 
                                               ssd);

    input [3:0] hex;
   output [7:0] ssd;
   
   
   ROM16X1 #( .INIT(16'h2812) ) Ca (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[0]));
   ROM16X1 #( .INIT(16'hD860) ) Cb (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[1]));
   ROM16X1 #( .INIT(16'hD004) ) Cc (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[2]));
   ROM16X1 #( .INIT(16'h8492) ) Cd (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[3]));
   ROM16X1 #( .INIT(16'h02BA) ) Ce (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[4]));
   ROM16X1 #( .INIT(16'h208E) ) Cf (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[5]));
   ROM16X1 #( .INIT(16'h1083) ) Cg (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[6]));
   ROM16X1 #( .INIT(16'hffff) ) Dp (.A0(hex[0]), 
               .A1(hex[1]), 
               .A2(hex[2]), 
               .A3(hex[3]), 
               .O(ssd[7]));
endmodule
`timescale 1ns / 1ps

module mux4bit_4x1_MUSER_ee201l_number_lock_top(A, 
                                                B, 
                                                C, 
                                                D, 
                                                S0, 
                                                S1, 
                                                O);

    input [3:0] A;
    input [3:0] B;
    input [3:0] C;
    input [3:0] D;
    input S0;
    input S1;
   output [3:0] O;
   
   wire XLXN_53;
   
   (* HU_SET = "XLXI_16_7" *) 
   M4_1E_HXILINX_ee201l_number_lock_top  XLXI_16 (.D0(A[0]), 
                                                 .D1(B[0]), 
                                                 .D2(C[0]), 
                                                 .D3(D[0]), 
                                                 .E(XLXN_53), 
                                                 .S0(S0), 
                                                 .S1(S1), 
                                                 .O(O[0]));
   (* HU_SET = "XLXI_17_6" *) 
   M4_1E_HXILINX_ee201l_number_lock_top  XLXI_17 (.D0(A[1]), 
                                                 .D1(B[1]), 
                                                 .D2(C[1]), 
                                                 .D3(D[1]), 
                                                 .E(XLXN_53), 
                                                 .S0(S0), 
                                                 .S1(S1), 
                                                 .O(O[1]));
   (* HU_SET = "XLXI_18_8" *) 
   M4_1E_HXILINX_ee201l_number_lock_top  XLXI_18 (.D0(A[2]), 
                                                 .D1(B[2]), 
                                                 .D2(C[2]), 
                                                 .D3(D[2]), 
                                                 .E(XLXN_53), 
                                                 .S0(S0), 
                                                 .S1(S1), 
                                                 .O(O[2]));
   (* HU_SET = "XLXI_19_9" *) 
   M4_1E_HXILINX_ee201l_number_lock_top  XLXI_19 (.D0(A[3]), 
                                                 .D1(B[3]), 
                                                 .D2(C[3]), 
                                                 .D3(D[3]), 
                                                 .E(XLXN_53), 
                                                 .S0(S0), 
                                                 .S1(S1), 
                                                 .O(O[3]));
   VCC  XLXI_34 (.P(XLXN_53));
endmodule
`timescale 1ns / 1ps

module onehot_to_hex_16bit_MUSER_ee201l_number_lock_top(one_hot, 
                                                        hex);

    input [15:0] one_hot;
   output [3:0] hex;
   
   
   (* HU_SET = "XLXI_9_10" *) 
   OR8_HXILINX_ee201l_number_lock_top  XLXI_9 (.I0(one_hot[15]), 
                                              .I1(one_hot[13]), 
                                              .I2(one_hot[11]), 
                                              .I3(one_hot[9]), 
                                              .I4(one_hot[7]), 
                                              .I5(one_hot[5]), 
                                              .I6(one_hot[3]), 
                                              .I7(one_hot[1]), 
                                              .O(hex[0]));
   (* HU_SET = "XLXI_19_11" *) 
   OR8_HXILINX_ee201l_number_lock_top  XLXI_19 (.I0(one_hot[15]), 
                                               .I1(one_hot[14]), 
                                               .I2(one_hot[11]), 
                                               .I3(one_hot[10]), 
                                               .I4(one_hot[7]), 
                                               .I5(one_hot[6]), 
                                               .I6(one_hot[3]), 
                                               .I7(one_hot[2]), 
                                               .O(hex[1]));
   (* HU_SET = "XLXI_20_12" *) 
   OR8_HXILINX_ee201l_number_lock_top  XLXI_20 (.I0(one_hot[15]), 
                                               .I1(one_hot[14]), 
                                               .I2(one_hot[13]), 
                                               .I3(one_hot[12]), 
                                               .I4(one_hot[7]), 
                                               .I5(one_hot[6]), 
                                               .I6(one_hot[5]), 
                                               .I7(one_hot[4]), 
                                               .O(hex[2]));
   (* HU_SET = "XLXI_21_13" *) 
   OR8_HXILINX_ee201l_number_lock_top  XLXI_21 (.I0(one_hot[15]), 
                                               .I1(one_hot[14]), 
                                               .I2(one_hot[13]), 
                                               .I3(one_hot[12]), 
                                               .I4(one_hot[11]), 
                                               .I5(one_hot[10]), 
                                               .I6(one_hot[9]), 
                                               .I7(one_hot[8]), 
                                               .O(hex[3]));
endmodule
`timescale 1ns / 1ps

module ee201l_number_lock_top(BtnC, 
                              BtnL, 
                              BtnR, 
                              ClkPort, 
                              sw0, 
                              sw1, 
                              sw2, 
                              sw3, 
                              An0, 
                              An1, 
                              An2, 
                              An3, 
                              ca, 
                              cb, 
                              cc, 
                              cd, 
                              ce, 
                              cf, 
                              cg, 
                              dp, 
                              FlashCS, 
                              ld0, 
                              ld1, 
                              ld2, 
                              ld3, 
                              ld4, 
                              ld5, 
                              ld6, 
                              ld7, 
                              MemOE, 
                              MemWR, 
                              QuadSpiFlashCS, 
                              RamCS);

    input BtnC;
    input BtnL;
    input BtnR;
    input ClkPort;
    input sw0;
    input sw1;
    input sw2;
    input sw3;
   output An0;
   output An1;
   output An2;
   output An3;
   output ca;
   output cb;
   output cc;
   output cd;
   output ce;
   output cf;
   output cg;
   output dp;
   output FlashCS;
   output ld0;
   output ld1;
   output ld2;
   output ld3;
   output ld4;
   output ld5;
   output ld6;
   output ld7;
   output MemOE;
   output MemWR;
   output QuadSpiFlashCS;
   output RamCS;
   
   wire [25:0] div_clk;
   wire Ground;
   wire [3:0] hex;
   wire reset;
   wire [3:0] selected_hex;
   wire [7:0] ssd_output;
   wire [10:0] state;
   wire sysclk;
   wire u;
   wire XLXN_71;
   wire XLXN_87;
   wire XLXN_91;
   wire XLXN_99;
   wire XLXN_103;
   wire XLXN_107;
   wire XLXN_111;
   wire XLXN_198;
   wire XLXN_216;
   wire XLXN_695;
   wire XLXN_774;
   wire XLXN_780;
   wire XLXN_781;
   wire XLXN_782;
   wire XLXN_783;
   wire XLXN_784;
   wire XLXN_785;
   wire z;
   
   BUF  XLXI_7 (.I(div_clk[25]), 
               .O(sysclk));
   VCC  XLXI_9 (.P(RamCS));
   VCC  XLXI_10 (.P(MemOE));
   VCC  XLXI_13 (.P(MemWR));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_29 (.I(u), 
                 .O(ld1));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_30 (.I(z), 
                 .O(ld0));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) (* 
         IFD_DELAY_VALUE = "AUTO" *) 
   IBUF  XLXI_31 (.I(BtnL), 
                 .O(u));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) (* 
         IFD_DELAY_VALUE = "AUTO" *) 
   IBUF  XLXI_32 (.I(BtnR), 
                 .O(z));
   OR2  XLXI_36 (.I0(ssd_output[0]), 
                .I1(XLXN_695), 
                .O(XLXN_71));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_44 (.I(XLXN_71), 
                 .O(ca));
   OR2  XLXI_45 (.I0(ssd_output[1]), 
                .I1(XLXN_695), 
                .O(XLXN_87));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_46 (.I(XLXN_87), 
                 .O(cb));
   OR2  XLXI_47 (.I0(ssd_output[2]), 
                .I1(XLXN_695), 
                .O(XLXN_91));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_48 (.I(XLXN_91), 
                 .O(cc));
   OR2  XLXI_51 (.I0(ssd_output[3]), 
                .I1(XLXN_695), 
                .O(XLXN_99));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_52 (.I(XLXN_99), 
                 .O(cd));
   OR2  XLXI_53 (.I0(ssd_output[4]), 
                .I1(XLXN_695), 
                .O(XLXN_103));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_54 (.I(XLXN_103), 
                 .O(ce));
   OR2  XLXI_55 (.I0(ssd_output[5]), 
                .I1(XLXN_695), 
                .O(XLXN_107));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_56 (.I(XLXN_107), 
                 .O(cf));
   OR2  XLXI_57 (.I0(ssd_output[6]), 
                .I1(XLXN_695), 
                .O(XLXN_111));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_58 (.I(XLXN_111), 
                 .O(cg));
   AND2  XLXI_59 (.I0(sysclk), 
                 .I1(state[9]), 
                 .O(XLXN_695));
   (* HU_SET = "XLXI_75_15" *) 
   D2_4E_HXILINX_ee201l_number_lock_top  XLXI_75 (.A0(div_clk[18]), 
                                                 .A1(div_clk[19]), 
                                                 .E(XLXN_781), 
                                                 .D0(XLXN_782), 
                                                 .D1(XLXN_783), 
                                                 .D2(XLXN_784), 
                                                 .D3(XLXN_785));
   hex_to_ssd_MUSER_ee201l_number_lock_top  XLXI_108 (.hex(selected_hex[3:0]), 
                                                     .ssd(ssd_output[7:0]));
   onehot_to_hex_16bit_MUSER_ee201l_number_lock_top  XLXI_109 
         (.one_hot({Ground, Ground, Ground, Ground, Ground, state[10:0]}), 
                                                              .hex(hex[3:0]));
   mux4bit_4x1_MUSER_ee201l_number_lock_top  XLXI_131 (.A({Ground, 
         state[10:8]}), 
                                                      .B(state[7:4]), 
                                                      .C(state[3:0]), 
                                                      .D(hex[3:0]), 
                                                      .S0(div_clk[18]), 
                                                      .S1(div_clk[19]), 
                                                      .O(selected_hex[3:0]));
   clock_divider  XLXI_139 (.clk(XLXN_198), 
                           .reset(reset), 
                           .div_clk(div_clk[25:0]));
   ee201l_number_lock_MUSER_ee201l_number_lock_top  XLXI_141 (.reset(reset), 
                                                             .sysclk(sysclk), 
                                                             .u(u), 
                                                             .z(z), 
                                                             
         .state(state[10:0]));
   BUFG  XLXI_142 (.I(ClkPort), 
                  .O(XLXN_198));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_144 (.I(sysclk), 
                  .O(ld2));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_145 (.I(hex[0]), 
                  .O(ld4));
   GND  XLXI_153 (.G(XLXN_216));
   BUF  XLXI_154 (.I(XLXN_216), 
                 .O(Ground));
   VCC  XLXI_273 (.P(FlashCS));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_352 (.I(hex[1]), 
                  .O(ld5));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_353 (.I(hex[2]), 
                  .O(ld6));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_354 (.I(hex[3]), 
                  .O(ld7));
   (* HU_SET = "XLXI_367_14" *) 
   M16_1E_HXILINX_ee201l_number_lock_top  XLXI_367 (.D0(state[0]), 
                                                   .D1(state[1]), 
                                                   .D2(state[2]), 
                                                   .D3(state[3]), 
                                                   .D4(state[4]), 
                                                   .D5(state[5]), 
                                                   .D6(state[6]), 
                                                   .D7(state[7]), 
                                                   .D8(state[8]), 
                                                   .D9(state[9]), 
                                                   .D10(state[10]), 
                                                   .D11(XLXN_780), 
                                                   .D12(XLXN_780), 
                                                   .D13(XLXN_780), 
                                                   .D14(XLXN_780), 
                                                   .D15(XLXN_780), 
                                                   .E(XLXN_774), 
                                                   .S0(sw0), 
                                                   .S1(sw1), 
                                                   .S2(sw2), 
                                                   .S3(sw3), 
                                                   .O(ld3));
   VCC  XLXI_370 (.P(XLXN_774));
   GND  XLXI_371 (.G(XLXN_780));
   (* IOSTANDARD = "DEFAULT" *) (* SLEW = "SLOW" *) (* DRIVE = "12" *) 
   OBUF  XLXI_377 (.I(ssd_output[7]), 
                  .O(dp));
   VCC  XLXI_382 (.P(QuadSpiFlashCS));
   (* IOSTANDARD = "DEFAULT" *) (* IBUF_DELAY_VALUE = "0" *) (* 
         IFD_DELAY_VALUE = "AUTO" *) 
   IBUF  XLXI_389 (.I(BtnC), 
                  .O(reset));
   VCC  XLXI_390 (.P(XLXN_781));
   INV  XLXI_391 (.I(XLXN_782), 
                 .O(An3));
   INV  XLXI_392 (.I(XLXN_783), 
                 .O(An2));
   INV  XLXI_393 (.I(XLXN_784), 
                 .O(An1));
   INV  XLXI_394 (.I(XLXN_785), 
                 .O(An0));
endmodule
